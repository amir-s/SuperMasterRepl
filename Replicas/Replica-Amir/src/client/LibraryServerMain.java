
package client;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebService(name = "LibraryServerMain", targetNamespace = "lib")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface LibraryServerMain {


    /**
     * 
     * @param arg5
     * @param arg4
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @param arg6
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "registerUser", targetNamespace = "lib", className = "client.RegisterUser")
    @ResponseWrapper(localName = "registerUserResponse", targetNamespace = "lib", className = "client.RegisterUserResponse")
    @Action(input = "lib/LibraryServerMain/registerUserRequest", output = "lib/LibraryServerMain/registerUserResponse")
    public boolean registerUser(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        String arg4,
        @WebParam(name = "arg5", targetNamespace = "")
        String arg5,
        @WebParam(name = "arg6", targetNamespace = "")
        String arg6);

    /**
     * 
     * @param arg4
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "reserveBook", targetNamespace = "lib", className = "client.ReserveBook")
    @ResponseWrapper(localName = "reserveBookResponse", targetNamespace = "lib", className = "client.ReserveBookResponse")
    @Action(input = "lib/LibraryServerMain/reserveBookRequest", output = "lib/LibraryServerMain/reserveBookResponse")
    public boolean reserveBook(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        String arg4);

    /**
     * 
     * @param arg5
     * @param arg4
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @param arg6
     */
    @WebMethod
    @RequestWrapper(localName = "setDuration", targetNamespace = "lib", className = "client.SetDuration")
    @ResponseWrapper(localName = "setDurationResponse", targetNamespace = "lib", className = "client.SetDurationResponse")
    @Action(input = "lib/LibraryServerMain/setDurationRequest", output = "lib/LibraryServerMain/setDurationResponse")
    public void setDuration(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        String arg4,
        @WebParam(name = "arg5", targetNamespace = "")
        String arg5,
        @WebParam(name = "arg6", targetNamespace = "")
        int arg6);

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getNonRetuners", targetNamespace = "lib", className = "client.GetNonRetuners")
    @ResponseWrapper(localName = "getNonRetunersResponse", targetNamespace = "lib", className = "client.GetNonRetunersResponse")
    @Action(input = "lib/LibraryServerMain/getNonRetunersRequest", output = "lib/LibraryServerMain/getNonRetunersResponse")
    public String getNonRetuners(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        int arg3);

    /**
     * 
     * @param arg4
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "reserveInterLibrary", targetNamespace = "lib", className = "client.ReserveInterLibrary")
    @ResponseWrapper(localName = "reserveInterLibraryResponse", targetNamespace = "lib", className = "client.ReserveInterLibraryResponse")
    @Action(input = "lib/LibraryServerMain/reserveInterLibraryRequest", output = "lib/LibraryServerMain/reserveInterLibraryResponse")
    public boolean reserveInterLibrary(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        String arg4);

}
